/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace ERC721PermitEverywhere {
  export type PermitTransferFromStruct = {
    token: PromiseOrValue<string>;
    spender: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    allowAnyTokenId: PromiseOrValue<boolean>;
    deadline: PromiseOrValue<BigNumberish>;
  };

  export type PermitTransferFromStructOutput = [
    string,
    string,
    BigNumber,
    boolean,
    BigNumber
  ] & {
    token: string;
    spender: string;
    tokenId: BigNumber;
    allowAnyTokenId: boolean;
    deadline: BigNumber;
  };

  export type SignatureStruct = {
    r: PromiseOrValue<BytesLike>;
    s: PromiseOrValue<BytesLike>;
    v: PromiseOrValue<BigNumberish>;
  };

  export type SignatureStructOutput = [string, string, number] & {
    r: string;
    s: string;
    v: number;
  };
}

export interface ERC721PermitEverywhereInterface extends utils.Interface {
  functions: {
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "TRANSFER_PERMIT_TYPEHASH()": FunctionFragment;
    "currentNonce(address)": FunctionFragment;
    "executePermitSafeTransferFrom(address,address,uint256,bytes,(address,address,uint256,bool,uint256),(bytes32,bytes32,uint8))": FunctionFragment;
    "executePermitTransferFrom(address,address,uint256,(address,address,uint256,bool,uint256),(bytes32,bytes32,uint8))": FunctionFragment;
    "hashPermit((address,address,uint256,bool,uint256),uint256)": FunctionFragment;
    "increaseNonce(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DOMAIN_SEPARATOR"
      | "TRANSFER_PERMIT_TYPEHASH"
      | "currentNonce"
      | "executePermitSafeTransferFrom"
      | "executePermitTransferFrom"
      | "hashPermit"
      | "increaseNonce"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TRANSFER_PERMIT_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentNonce",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "executePermitSafeTransferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      ERC721PermitEverywhere.PermitTransferFromStruct,
      ERC721PermitEverywhere.SignatureStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executePermitTransferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      ERC721PermitEverywhere.PermitTransferFromStruct,
      ERC721PermitEverywhere.SignatureStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hashPermit",
    values: [
      ERC721PermitEverywhere.PermitTransferFromStruct,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseNonce",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TRANSFER_PERMIT_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executePermitSafeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executePermitTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hashPermit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseNonce",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ERC721PermitEverywhere extends BaseContract {
  contractName: "ERC721PermitEverywhere";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ERC721PermitEverywhereInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    TRANSFER_PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    currentNonce(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    executePermitSafeTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      permit: ERC721PermitEverywhere.PermitTransferFromStruct,
      sig: ERC721PermitEverywhere.SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executePermitTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      permit: ERC721PermitEverywhere.PermitTransferFromStruct,
      sig: ERC721PermitEverywhere.SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hashPermit(
      permit: ERC721PermitEverywhere.PermitTransferFromStruct,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { hash: string }>;

    increaseNonce(
      increaseAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  TRANSFER_PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  currentNonce(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  executePermitSafeTransferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    permit: ERC721PermitEverywhere.PermitTransferFromStruct,
    sig: ERC721PermitEverywhere.SignatureStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executePermitTransferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    permit: ERC721PermitEverywhere.PermitTransferFromStruct,
    sig: ERC721PermitEverywhere.SignatureStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hashPermit(
    permit: ERC721PermitEverywhere.PermitTransferFromStruct,
    nonce: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  increaseNonce(
    increaseAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    TRANSFER_PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    currentNonce(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executePermitSafeTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      permit: ERC721PermitEverywhere.PermitTransferFromStruct,
      sig: ERC721PermitEverywhere.SignatureStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    executePermitTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      permit: ERC721PermitEverywhere.PermitTransferFromStruct,
      sig: ERC721PermitEverywhere.SignatureStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    hashPermit(
      permit: ERC721PermitEverywhere.PermitTransferFromStruct,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    increaseNonce(
      increaseAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    TRANSFER_PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    currentNonce(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executePermitSafeTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      permit: ERC721PermitEverywhere.PermitTransferFromStruct,
      sig: ERC721PermitEverywhere.SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executePermitTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      permit: ERC721PermitEverywhere.PermitTransferFromStruct,
      sig: ERC721PermitEverywhere.SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hashPermit(
      permit: ERC721PermitEverywhere.PermitTransferFromStruct,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseNonce(
      increaseAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TRANSFER_PERMIT_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentNonce(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executePermitSafeTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      permit: ERC721PermitEverywhere.PermitTransferFromStruct,
      sig: ERC721PermitEverywhere.SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executePermitTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      permit: ERC721PermitEverywhere.PermitTransferFromStruct,
      sig: ERC721PermitEverywhere.SignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hashPermit(
      permit: ERC721PermitEverywhere.PermitTransferFromStruct,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseNonce(
      increaseAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
