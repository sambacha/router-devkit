/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  ERC20PermitEverywhere,
  ERC20PermitEverywhereInterface,
} from "../ERC20PermitEverywhere";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "TRANSFER_PERMIT_TYPEHASH",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "currentNonce",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "address",
            name: "token",
            type: "address",
          },
          {
            internalType: "address",
            name: "spender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "maxAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
        ],
        internalType: "struct ERC20PermitEverywhere.PermitTransferFrom",
        name: "permit",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint8",
            name: "v",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "r",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "s",
            type: "bytes32",
          },
        ],
        internalType: "struct ERC20PermitEverywhere.Signature",
        name: "sig",
        type: "tuple",
      },
    ],
    name: "executePermitTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "token",
            type: "address",
          },
          {
            internalType: "address",
            name: "spender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "maxAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
        ],
        internalType: "struct ERC20PermitEverywhere.PermitTransferFrom",
        name: "permit",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "nonce",
        type: "uint256",
      },
    ],
    name: "hashPermit",
    outputs: [
      {
        internalType: "bytes32",
        name: "hash",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "increaseAmount",
        type: "uint256",
      },
    ],
    name: "increaseNonce",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60c060405234801561001057600080fd5b50604080518082018252601581527f45524332305065726d697445766572797768657265000000000000000000000060209182015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f918101919091527f07370b7d7d98a1f89b49c93c90b1067c856a289d5b53a859a0fdc71819e26d4f918101919091527f06c015bd22b4c69690933c1058878ebdfef31f9aaae40bbe86d8a09fe1b2972c60608201524660808201523060a082015260c00160408051601f1981840301815291905280516020909101206080527f7158ce2a2f825a24261ceb340caada1d683bbb8041209722596d306e3d1e80fa60a05260805160a0516108a661013c6000396000818160fd015261017e015260008181607c015261015d01526108a66000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063dca4f81611610050578063dca4f816146100e5578063e59ba924146100f8578063f2ab51f71461011f57600080fd5b80633644e515146100775780636437ecfc146100b057806379f7573a146100d0575b600080fd5b61009e7f000000000000000000000000000000000000000000000000000000000000000081565b60405190815260200160405180910390f35b61009e6100be366004610602565b60006020819052908152604090205481565b6100e36100de366004610624565b610132565b005b61009e6100f33660046106d6565b610159565b61009e7f000000000000000000000000000000000000000000000000000000000000000081565b6100e361012d366004610701565b610226565b33600090815260208190526040812080548392906101519084906107e1565b909155505050565b60007f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060208510156101a857fe5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0850180516080909601805192825294855260c0812095905290925250604080517f19010000000000000000000000000000000000000000000000000000000000006000908152600293909352602293909352604290912091905290565b6102366040830160208401610602565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102b55760405162461bcd60e51b815260206004820152601560248201527f5350454e4445525f4e4f545f5045524d4954544544000000000000000000000060448201526064015b60405180910390fd5b42826060013510156103095760405162461bcd60e51b815260206004820152600e60248201527f5045524d49545f4558504952454400000000000000000000000000000000000060448201526064016102ac565b828260400135101561035d5760405162461bcd60e51b815260206004820152601560248201527f455843454544535f5045524d49545f414d4f554e54000000000000000000000060448201526064016102ac565b6103b26103ac610372368590038501856107f9565b73ffffffffffffffffffffffffffffffffffffffff881660009081526020819052604081208054916103a383610815565b91905055610159565b8261044b565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161461042c5760405162461bcd60e51b815260206004820152600e60248201527f494e56414c49445f5349474e455200000000000000000000000000000000000060448201526064016102ac565b61044461043c6020840184610602565b868686610545565b5050505050565b600060018361045d602085018561084d565b604080516000815260208181018084529490945260ff9092168282015291850135606082015290840135608082015260a0016020604051602081039080840390855afa1580156104b1573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff811661053f5760405162461bcd60e51b815260206004820152601160248201527f494e56414c49445f5349474e415455524500000000000000000000000000000060448201526064016102ac565b92915050565b6040516323b872dd600052836020528260405281606052602060006064601c6000895af13d1560016000511417166105cb57600051153d1517156105c15762461bcd60e51b6000526020600452601a6024527f45524332305f5452414e534645525f46524f4d5f4641494c454400000000000060445260646000fd5b3d6000803e3d6000fd5b600060605260405250505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146105fd57600080fd5b919050565b60006020828403121561061457600080fd5b61061d826105d9565b9392505050565b60006020828403121561063657600080fd5b5035919050565b60006080828403121561064f57600080fd5b6040516080810181811067ffffffffffffffff82111715610699577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040529050806106a8836105d9565b81526106b6602084016105d9565b602082015260408301356040820152606083013560608201525092915050565b60008060a083850312156106e957600080fd5b6106f3848461063d565b946080939093013593505050565b600080600080600085870361014081121561071b57600080fd5b610724876105d9565b9550610732602088016105d9565b94506040870135935060807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa08201121561076b57600080fd5b60608701925060607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff20820112156107a157600080fd5b5060e0860190509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082198211156107f4576107f46107b2565b500190565b60006080828403121561080b57600080fd5b61061d838361063d565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610846576108466107b2565b5060010190565b60006020828403121561085f57600080fd5b813560ff8116811461061d57600080fdfea26469706673582212203c29d05bd146802a2aa89b0a08fad3291fb61f4fe54de4047e56efe15f0a46ff64736f6c634300080f0033";

type ERC20PermitEverywhereConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20PermitEverywhereConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20PermitEverywhere__factory extends ContractFactory {
  constructor(...args: ERC20PermitEverywhereConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "ERC20PermitEverywhere";
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ERC20PermitEverywhere> {
    return super.deploy(overrides || {}) as Promise<ERC20PermitEverywhere>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ERC20PermitEverywhere {
    return super.attach(address) as ERC20PermitEverywhere;
  }
  override connect(signer: Signer): ERC20PermitEverywhere__factory {
    return super.connect(signer) as ERC20PermitEverywhere__factory;
  }
  static readonly contractName: "ERC20PermitEverywhere";

  public readonly contractName: "ERC20PermitEverywhere";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20PermitEverywhereInterface {
    return new utils.Interface(_abi) as ERC20PermitEverywhereInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC20PermitEverywhere {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ERC20PermitEverywhere;
  }
}
